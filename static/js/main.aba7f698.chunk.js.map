{"version":3,"sources":["components/layaout/NavBar.js","components/pokemon/PokeCard.js","components/pokemon/PokeList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","shards_react_es","type","theme","expand","href","src","height","alt","Component","PokeCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","foto","id","tipos","stats","pokeDescripcion","nombre","modalOpen","toggle","bind","assertThisInitialized","Axios","get","url","res","setState","data","sprites","front_default","types","reverse","pokemon","species","pokeDescripciones","flavor_text_entries","find","descripcion","language","name","flavor_text","className","onClick","style","background","colorFondo","pill","top","size","open","map","stat","value","base_stat","length","forEach","tipo","index","undefined","PokeList","pokeUrl","pokemons","nextUrl","alertVisible","alertCerrar","getPokemons","concat","results","next","alertTexto","_this2","dismissible","PokeCard_PokeCard","outline","block","App","NavBar_NavBar","PokeList_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aba7f698.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    Navbar,\r\n    NavbarBrand\r\n } from 'shards-react'\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar type=\"dark\" theme=\"danger\" expand='md'>\r\n                    <NavbarBrand href='/'>\r\n                        <img src=\"PokÃ©dex_logo.png\" height=\"30\" alt=\"Pokedex\">\r\n                        </img>\r\n                    </NavbarBrand>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardTitle,\r\n    CardImg,\r\n    Badge,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Progress\r\n} from 'shards-react'\r\n\r\nexport default class PokeCard extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            foto: 'default.png',\r\n            id: '???',\r\n            tipos: [],\r\n            stats: [],\r\n            pokeDescripcion: props.nombre,\r\n            modalOpen: false,\r\n        }\r\n        this.toggle = this.toggle.bind(this)\r\n    }\r\n\r\n    async componentDidMount () {\r\n        try {\r\n            const res = await Axios.get(this.props.url)\r\n            this.setState({\r\n                foto: res.data.sprites.front_default,\r\n                tipos: res.data.types,\r\n                id: res.data.id,\r\n                stats: res.data.stats.reverse(),\r\n                pokemon: res.data\r\n            })\r\n            try {\r\n                const pokeDescripciones = await Axios.get(res.data.species.url)\r\n                const pokeDescripcion = pokeDescripciones.data.flavor_text_entries.find(function(descripcion) {\r\n                    return descripcion.language.name === 'es';\r\n                });\r\n                this.setState({\r\n                    pokeDescripcion: pokeDescripcion.flavor_text\r\n                })\r\n            } catch (error) {\r\n            //    console.log(error);\r\n            }\r\n        } catch (error) {\r\n        //    console.log(error);\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            modalOpen: !this.state.modalOpen\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { modalOpen } = this.state\r\n        return (\r\n            <div className=\"col-3 mt-2 poke-card\" onClick={this.toggle}>\r\n                <Card className=\"poke-card\" style={{background: this.colorFondo(this.state.tipos)}}>\r\n                    <Badge pill theme='secondary' className='poke-pill m-2'>\r\n                        {this.state.id}\r\n                    </Badge>\r\n                    <CardImg top src={this.state.foto} />\r\n                    <CardBody>\r\n                        <CardTitle className='text-center'>\r\n                            {this.props.nombre}\r\n                        </CardTitle>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n                <Modal size='lg' open={modalOpen} toggle={this.toggle} >\r\n                    <ModalHeader>\r\n                        {this.props.nombre}\r\n                    </ModalHeader>\r\n                    <ModalBody className='row'>\r\n                        <div className='col'>\r\n                            <div className='text-center'>\r\n                                <img src={this.state.foto} >\r\n                                </img>\r\n                            </div>\r\n                            <p>\r\n                                {this.state.pokeDescripcion}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-8\">\r\n                            {\r\n                                this.state.stats.map(stat => {\r\n                                    return <div className='row'>\r\n                                        <div className='col-3'>\r\n                                            {stat.stat.name}\r\n                                        </div>\r\n                                        <div className='col'>\r\n                                            <Progress value={stat.base_stat}>{stat.base_stat}</Progress>\r\n                                        </div>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    colorFondo(tipos) {\r\n       if (tipos.length > 0) {\r\n            let colorFondo = ''\r\n            if (tipos.length > 1) {\r\n                colorFondo = 'linear-gradient(360deg, '\r\n            }\r\n\r\n            tipos.forEach((tipo, index) => {\r\n                switch (tipo.type.name) {\r\n                    case 'normal':\r\n                        colorFondo += '#b7aaa7'\r\n                        break;\r\n                    case 'poison':\r\n                        colorFondo += '#8b4f7d'\r\n                    break;\r\n                    case 'grass':\r\n                        colorFondo += '#7fbf67'\r\n                    break;\r\n                    case 'fire':\r\n                        colorFondo += '#dd563f'\r\n                    break;\r\n                    case 'water':\r\n                        colorFondo += '#3898f5'\r\n                    break;\r\n                    case 'electric':\r\n                        colorFondo += '#ffdb71'\r\n                    break;\r\n                    case 'bug':\r\n                        colorFondo += '#aabb2a'\r\n                    break;\r\n                    case 'flying':\r\n                        colorFondo += '#6d9ae2'\r\n                    break;\r\n                       \r\n                    default:\r\n                        break;\r\n                }\r\n                \r\n                if (tipos[(index + 1)] !== undefined) {\r\n                    colorFondo += ', '\r\n                    \r\n                }\r\n            });\r\n\r\n            if (tipos.length > 1) {\r\n                colorFondo += ')'\r\n            }\r\n            \r\n            return colorFondo\r\n       }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nimport PokeCard from './PokeCard'\r\nimport {\r\n    Row,\r\n    Alert,\r\n    Button\r\n} from 'shards-react'\r\n\r\nimport \"../../tipos.css\";\r\n\r\n\r\n\r\nexport default class PokeList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pokeUrl : \"https://pokeapi.co/api/v2/pokemon/?limit=25\",\r\n            pokemons : [],\r\n            nextUrl: null,\r\n            modalOpen: false,\r\n            alertVisible: false\r\n        }\r\n        this.toggle = this.toggle.bind(this)\r\n        this.alertCerrar = this.alertCerrar.bind(this)\r\n        this.getPokemons = this.getPokemons.bind(this)\r\n    }\r\n    \r\n    async componentDidMount () {\r\n        this.getPokemons()\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            modalOpen: !this.state.modalOpen\r\n        })\r\n    }\r\n\r\n    alertCerrar() {\r\n        this.setState({alertVisible:false})\r\n    }\r\n\r\n    async getPokemons() {\r\n        try {\r\n            let url = this.state.nextUrl\r\n            if (this.state.nextUrl === null) {\r\n                url = this.state.pokeUrl\r\n            }\r\n            const res = await Axios.get(url)\r\n            this.setState({\r\n                pokemons: this.state.pokemons.concat(res.data.results),\r\n                nextUrl: res.data.next\r\n            })\r\n        } catch (error) {\r\n            this.setState({\r\n                alertTexto: 'Error al obtener lista de Pokemons',\r\n                alertVisible: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Alert theme='warning' open={this.state.alertVisible} dismissible={this.alertCerrar}>\r\n                    {this.state.alertTexto}\r\n                </Alert>\r\n                <Row className='m-2'>\r\n                    {\r\n                        this.state.pokemons.map(pokemon => (\r\n                            <PokeCard\r\n                                nombre={pokemon.name}\r\n                                url={pokemon.url}\r\n                                onClick={this.toggle.bind(this)}\r\n                            />\r\n                        ))\r\n                    }\r\n                </Row>\r\n                <div className='m-1'>\r\n                    <Button outline block onClick={this.getPokemons} >\r\n                        Mas\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'shards-ui/dist/css/shards.min.css';\r\nimport \"./App.css\";\r\n\r\nimport NavBar from \"./components/layaout/NavBar\"\r\nimport PokeList from './components/pokemon/PokeList'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <NavBar />\r\n        <PokeList />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}